# gdb -q -x gdbscript.py
import gdb

ge = gdb.execute
gp = gdb.parse_and_eval

ge("file ./main")

main_bp = 0x5555555556a1
handle_bp = 0x5555555552c8
#where_func = 0x0000001000000017
gdb.Breakpoint(f"*{main_bp}")
gdb.Breakpoint(f"*{handle_bp}")

ge("entry")
ge("continue")
# # 메인 진입입
# ge("continue")
# ge("continue")

# rdx = gp("$rdx")
# print(hex(rdx))
# char_addr_addr = int(rdx) + 168
# print(hex(char_addr_addr))
# char_addr = ge("x/gx " + hex(char_addr_addr), to_string=True)
# char_addr = char_addr.split(":")[1].strip()
# print(char_addr) # char_addr 출력 : 0x00007ffff7ffa000

# char_value = ge("x/gx " + hex(int(char_addr,16)), to_string=True)
# char_value = char_value.split(":")[1].strip()  
# print(char_value) # char_value : 0x0000001000000017
# char_value = 0xFFFFFFFF & int(char_value, 16)
# print(char_value)
  #0x55555555541d
# v7 : 0x00007ffff7ffa018
# rdx : 0x7fffffffd500
# rdx + 168(0xA8) : 0x7fffffffd5A8
# char_addr : 0x00007ffff7ffa008
# char_value : 0x0067616c66000117

for i in range(100) :
    ge("continue")
    ge("continue")

    rdx = gp("$rdx")
    print("rdx : ", hex(rdx))
    char_addr_addr = int(rdx) + 168
    print("rbp : ", hex(char_addr_addr))
    char_addr = ge("x/gx " + hex(char_addr_addr), to_string=True)
    char_addr = char_addr.split(":")[1].strip()
    print("char_addr : ", char_addr) # char_addr 출력 : 0x00007ffff7ffa000

    char_value = ge("x/gx " + hex(int(char_addr,16)), to_string=True)
    char_value = char_value.split(":")[1].strip()  
    print("char_value : ", char_value) # char_value : 0x0000001000000017
    char_value = 0xFF & int(char_value, 16)
    print("char_value : ", char_value)
    
    #ge("pause")
